import java.util.*;
import java.io.*;
import javax.swing.*;
import java.awt.event.*;
import javax.swing.table.DefaultTableModel;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.filechooser.FileNameExtensionFilter;

public class Ventana extends JFrame {
	JPanel actual=null;
	JPanel anterior=null;
	JPanel bienvenida;
	JPanel login;
	JPanel miCuentaPanel;
	JPanel registro;
	JPanel perfil;
	JPanel consultar;
	JPanel accesoPermitido;
    JPanel listaUsuarios;
    
	String nombre, imagen="material-escolar(1).PNG";
	
	DefaultTableModel tableModel;
	
	JTable table;

	private String[] UsuariosColumns = {"Nombre", "Apellido", "Fecha de nacimiento", "Correo", "Telefono","Contraseña"};
	
	ArrayList<String[]> usersList;
	
	private int posicionUsuario;//TXT
    
    //-------
    private boolean registroPrevio = false;
    //-------

	private DefaultTableModel modelo;

    private JLabel imageLabel;
	
	public Ventana() {
		this.setVisible(true);
		this.setSize(1000, 640);
		this.setLocationRelativeTo(null);
		this.setTitle("ZENT");
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setLayout(null);
		this.getContentPane().setBackground(Color.decode("#101010"));
		
		getUsuarios();
	
		Bienvenida();
		timer();
		repaint();
		revalidate();
		
		
	}
	
	public void timer() {
		
		Timer timer = new Timer();
		
		TimerTask tarea = new TimerTask() {
			@Override
			public void run() {
				Login();
			}
		};
		
		timer.schedule(tarea, 2000);
		
	}

	public void Bienvenida() {

		bienvenida = new JPanel();
		bienvenida.setSize(1000, 600);
		bienvenida.setLocation(0,0);
		bienvenida.setLayout(null);
        bienvenida.setBackground(Color.decode("#101010"));
		/*
		JLabel titleinicio = new JLabel("Inicio",JLabel.CENTER);
		titleinicio.setFont(new Font("Comic Sans", Font.BOLD,30));
		titleinicio.setSize(260, 40);
		titleinicio.setLocation(130, 200);
		titleinicio.setOpaque(false);
		titleinicio.setBackground(Color.decode("#101010"));
		bienvenida.add(titleinicio);*/
		
		JLabel fondo = new JLabel(new ImageIcon("logo.PNG"));
		fondo.setBounds(175, 150, 658, 269);//ANCHO X, Y,TAMAÑO EC0307 008299
		bienvenida.add(fondo);
	
		
		
		actual=bienvenida;
		
		add(actual);
		
		repaint();
		revalidate();
	}
	
	public void menuMiCuenta() {
		miCuentaPanel = new JPanel();
		miCuentaPanel.setSize(1000, 600);
		miCuentaPanel.setLocation(0,0);
		miCuentaPanel.setLayout(null);
	    miCuentaPanel.setBackground(Color.decode("#dce7ec"));
		
		JLabel editarPerfil = new JLabel();
		editarPerfil.setText("Bienvenido "+ nombre);
		editarPerfil.setFont(new Font("Comic Sans", Font.BOLD,20));
		editarPerfil.setBounds(100, 10, 300, 80);
		editarPerfil.setHorizontalAlignment(SwingConstants.CENTER);
		editarPerfil.setForeground(Color.decode("#1f7690"));
		editarPerfil.setFont(new Font("cooper black",0,25));
		miCuentaPanel.add(editarPerfil);

	    JLabel nameLabel = new JLabel("Nombre:");
        nameLabel.setBounds(70, 270, 100, 20);
        JTextField nameField = new JTextField();
        nameField.setBounds(200, 270, 200, 20);

        JLabel apellidoLabel = new JLabel("Apellido:");
        apellidoLabel.setBounds(70, 300, 100, 20);
        JTextField apellidoField = new JTextField();
        apellidoField.setBounds(200, 300, 200, 20);

        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setBounds(70, 330, 100, 20);
        JTextField emailField = new JTextField();
        emailField.setBounds(200, 330, 200, 20);
        

        JLabel NumTelefono = new JLabel("Numero telefonico:");
        NumTelefono.setBounds(70, 360, 110, 20);
        JTextField NumeroTelefono = new JTextField();
        NumeroTelefono.setBounds(200, 360, 200, 20);
        JLabel passwordLabel = new JLabel("Contraseña:");
        passwordLabel.setBounds(70, 390, 100, 20);
        JPasswordField passwordField = new JPasswordField();
        passwordField.setBounds(200, 390, 200, 20);
        JLabel confirmPasswordLabel = new JLabel("Confirmar contraseña:");
        confirmPasswordLabel.setBounds(70, 420, 150, 20);
        JPasswordField confirmPasswordField = new JPasswordField();
        confirmPasswordField.setBounds(200, 420, 150, 20);
        
        
        NumeroTelefono.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                char character = e.getKeyChar();
                if (!(Character.isDigit(character) ||
                      (character == KeyEvent.VK_BACK_SPACE) ||
                      (character == KeyEvent.VK_DELETE))) {
                    e.consume();
                }
            }
        });
        


        JButton cancelButton = new JButton("Cancelar");
        cancelButton.setBounds(150, 450, 100, 30);

        JButton updateButton = new JButton("Actualizar datos");
        updateButton.setBounds(260, 450, 130, 30);

        miCuentaPanel.add(nameLabel);
        miCuentaPanel.add(nameField);
        miCuentaPanel.add(apellidoLabel);
        miCuentaPanel.add(apellidoField);
        miCuentaPanel.add(emailLabel);
        miCuentaPanel.add(emailField);
        miCuentaPanel.add(NumTelefono);
        miCuentaPanel.add(NumeroTelefono);
        miCuentaPanel.add(passwordLabel);
        miCuentaPanel.add(passwordField);
        miCuentaPanel.add(confirmPasswordLabel);
        miCuentaPanel.add(confirmPasswordField);
        miCuentaPanel.add(cancelButton);
        miCuentaPanel.add(updateButton);

        
        cancelButton.addActionListener(new ActionListener() {
		    @Override
		    public void actionPerformed(ActionEvent e) {
		        
		       Perfil();
		    }
		});
        
        updateButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {

				actualizarUsuario(nameField, apellidoField, emailField, NumeroTelefono, passwordField, confirmPasswordField, posicionUsuario);
			    }
        	
        });
        

		JLabel fondo = new JLabel(new ImageIcon("hotel2.PNG"));
		fondo.setBounds(-2, 1, 1000, 600);//ANCHO X, Y,TAMAÑO
		miCuentaPanel.add(fondo);
		
        anterior = actual;
        actual = miCuentaPanel;
        
        remove(anterior);
        add(actual);
        
        revalidate();
        repaint();
	}
	
	public void Login () {
		login = new JPanel();
		login.setSize(1000, 600);
		login.setLocation(0,0);
		login.setLayout(null);
        login.setBackground(Color.decode("#dce7ec"));
		


		JButton iniciarSesion = new JButton();
		iniciarSesion.setText("Iniciar Sesión");
		iniciarSesion.setSize(115, 20);
		iniciarSesion.setLocation(394, 350);
		iniciarSesion.setOpaque(false);
		iniciarSesion.setForeground(Color.decode("#9F9E9D"));
		iniciarSesion.setBackground(Color.decode("#5C87C0"));
		login.add(iniciarSesion);
		
		JButton registro = new JButton();
		registro.setText("Registrarse");
		registro.setSize(115, 20);
		registro.setLocation(515, 350);//1C1E24	9F9E9D
		registro.setOpaque(false);
		registro.setForeground(Color.decode("#9F9E9D"));
		registro.setBackground(Color.decode("#5C87C0"));		
		login.add(registro);
		
		JTextField username = new JTextField("ZENT_01@alu.uabcs.mx");
		username.setSize(185, 34);
		username.setLocation(438, 216);
		username.setOpaque(true);
		username.setForeground(Color.decode("#828387"));
		username.setBackground(Color.decode("#1C1E24"));
		login.add(username);
		
		JPasswordField password = new JPasswordField("1");
		password.setSize(185, 34);
		password.setLocation(438, 280);
		password.setOpaque(true);
		password.setForeground(Color.decode("#828387"));
		password.setBackground(Color.decode("#1C1E24"));
		login.add(password);
		
		registro.addActionListener(new ActionListener() {
			@Override
			
			public void actionPerformed(ActionEvent e) {
				registroPrevio = false;
				remove(actual);
				menuCrearUsuario();
				repaint();
				revalidate();
			}	
		});
		
		iniciarSesion.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {

				String user = username.getText();
				String pwd = new String (password.getPassword());
				
				BufferedReader reader;
				
				Boolean flag = false;
				
				try{
					
					FileReader file = new FileReader("users.txt");
					reader = new BufferedReader(file);
					
					String line = reader.readLine();
					
					int aux=0;
					
							while(line != null) {  
								
									
								String data [] = line.split(",");
								
								for (int i = 0; i < data.length; i++) {

									System.out.println(data[i]); 
								}
								 
								if( user.equals(data[3]) ) {
									
									if( pwd.equals(data[5]) ) {
										posicionUsuario = aux;
										flag = true;
									}
								} 
								
								line = reader.readLine();
								aux++;
								
								
							}
					
			
					if(flag==true) {
						
						String[] datos = getDatosUsuario(posicionUsuario);
						
						nombre = datos[0];
						JOptionPane.showMessageDialog(null,"Bienvenido "+nombre,"Acceso Permitido", JOptionPane.CLOSED_OPTION );
						registroPrevio=true;
						Perfil();
						
					}/*else {
						JOptionPane.showMessageDialog(null,"Error","Datos incorrectos, intentar denuevo.", JOptionPane.ERROR_MESSAGE );
					}*/
					
					
				} catch(IOException e1) {
					e1.printStackTrace();
				}
			}
			
		});

		
		JLabel iconoA = new JLabel(new ImageIcon("iconoA.PNG"));
		iconoA.setBounds(404, 216, 34, 34);
		login.add(iconoA); 

		JLabel iconoB = new JLabel(new ImageIcon("iconoB.PNG"));
		iconoB.setBounds(404, 280, 34, 34);
		login.add(iconoB);
		
		JLabel fondo = new JLabel(new ImageIcon("hotel1.PNG")); //FONDO
		fondo.setBounds(-2, 1, 1000, 600);
		
		login.add(fondo); 
		anterior=actual;
		actual=login;
		remove(anterior);
		add(actual);
		repaint();
		revalidate();
}	

	public String buscarImagen() {
		JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Archivos de imagen", "jpg", "jpeg", "png", "gif");
        fileChooser.setFileFilter(filter);
        int seleccion = fileChooser.showOpenDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
        	
            File selectedFile = fileChooser.getSelectedFile();
            return selectedFile.getAbsolutePath();
        }
        return null;
	}

	public void menuCrearUsuario() {
		
		registro = new JPanel();
		registro.setSize(1000, 600);
		registro.setLocation(0,0);
		registro.setLayout(null);
		registro.setBackground(Color.decode("#dce7ec"));
		
		JLabel editarPerfil = new JLabel();
		editarPerfil.setText("Editar Perfil");
		editarPerfil.setBounds(100, 10, 300, 80);
		editarPerfil.setHorizontalAlignment(SwingConstants.CENTER);
		editarPerfil.setForeground(Color.BLACK);
		editarPerfil.setFont(new Font("cooper black",0,25));
		
		//perfil.add(editarPerfil);
		//Campo Para Escribir
		//Nombres
		JTextField username = new JTextField("Nombre");
		username.setSize(283, 34);
		username.setLocation(390, 214);
		username.setOpaque(false);
		username.setForeground(Color.decode("#9F9E9D"));
		username.setBackground(Color.decode("#5C87C0"));
		registro.add(username);
		JLabel iconoA = new JLabel(new ImageIcon("iconoA.PNG"));
		iconoA.setBounds(356, 214, 34, 34);
		registro.add(iconoA); 
		
		//Apellido
		JTextField apellidos = new JTextField("Apellido");
		apellidos.setSize(283, 34);
		apellidos.setLocation(390, 270);
		apellidos.setOpaque(false);
		apellidos.setForeground(Color.decode("#9F9E9D"));
		apellidos.setBackground(Color.decode("#5C87C0"));
		registro.add(apellidos);
		JLabel iconoA1 = new JLabel(new ImageIcon("iconoA.PNG"));
		iconoA1.setBounds(356, 270, 34, 34);
		registro.add(iconoA1); 
		
		//Fecha de nacimiento
		JTextField FechaN = new JTextField("Fecha de nacimiento");
		FechaN.setSize(283, 34);
		FechaN.setLocation(390, 326);
		FechaN.setOpaque(false);
		FechaN.setForeground(Color.decode("#9F9E9D"));
		FechaN.setBackground(Color.decode("#5C87C0"));
		registro.add(FechaN);
		JLabel iconoA2 = new JLabel(new ImageIcon("iconoA.PNG"));
		iconoA2.setBounds(356, 326, 34, 34);
		registro.add(iconoA2); 
		
		//Correo electronico
		JTextField Correo= new JTextField("Email");
		Correo.setSize(283, 34);
		Correo.setLocation(390, 382);
		Correo.setOpaque(false);
		Correo.setForeground(Color.decode("#9F9E9D"));
		Correo.setBackground(Color.decode("#5C87C0"));
		registro.add(Correo);
		JLabel iconoA3 = new JLabel(new ImageIcon("iconoA.PNG"));
		iconoA3.setBounds(356, 382, 34, 34);
		registro.add(iconoA3); 
		
		//Numero de telefono
		JTextField Num = new JTextField("Num.Celular");
		Num.setSize(283, 34);
		Num.setLocation(390, 438);
		Num.setOpaque(false);
		Num.setForeground(Color.decode("#9F9E9D"));
		Num.setBackground(Color.decode("#5C87C0"));
		registro.add(Num);
		JLabel iconoA4 = new JLabel(new ImageIcon("iconoA.PNG"));
		iconoA4.setBounds(356, 438, 34, 34);
		registro.add(iconoA4); 
		 Num.addKeyListener(new KeyAdapter() {
	            public void keyTyped(KeyEvent e) {
	                char character = e.getKeyChar();
	                if (!(Character.isDigit(character) ||
	                      (character == KeyEvent.VK_BACK_SPACE) ||
	                      (character == KeyEvent.VK_DELETE))) {
	                    e.consume();
	                }
	            }
	        });
		
		
		//contraseña
		JPasswordField password = new JPasswordField("Contraseña");
		password.setSize(283, 34);
		password.setLocation(390, 494);
		password.setOpaque(false);
		password.setForeground(Color.decode("#9F9E9D"));
		password.setBackground(Color.decode("#5C87C0"));
		registro.add(Num);
		registro.add(password);
		JLabel iconoA5 = new JLabel(new ImageIcon("iconoA.PNG"));
		iconoA5.setBounds(356, 494, 34, 34);
		registro.add(iconoA5);
		
		JButton finalregistro = new JButton();
		finalregistro.setText("Registrarse");
		finalregistro.setSize(200, 20);
		finalregistro.setLocation(356, 530);
		finalregistro.setOpaque(false);
		finalregistro.setForeground(Color.decode("#9F9E9D"));
		finalregistro.setBackground(Color.decode("#5C87C0"));
		registro.add(finalregistro);

		JButton cancelar = new JButton();
		cancelar.setText("Cancelar");
		cancelar.setSize(90, 20);
		cancelar.setLocation(570, 530);
		cancelar.setOpaque(false);
		cancelar.setForeground(Color.decode("#9F9E9D"));
		cancelar.setBackground(Color.decode("#5C87C0"));
		registro.add(cancelar);
		//--------------------------------------------------------------------
		
		JButton colocarImagen = new JButton();
		colocarImagen.setText("Colocar Imagen");
		colocarImagen.setOpaque(true);
		colocarImagen.setBackground(Color.white);
		registro.add(colocarImagen);
		
		colocarImagen.addActionListener(new ActionListener() {

			@Override
		    public void actionPerformed(ActionEvent e) {
		        JFileChooser chooser = new JFileChooser();
		        FileNameExtensionFilter filter = new FileNameExtensionFilter(
		            "Archivos de imagen", "jpg", "png", "gif");
		        chooser.setFileFilter(filter);
		        int returnVal = chooser.showOpenDialog(null);
		        if (returnVal == JFileChooser.APPROVE_OPTION) {
		            System.out.println("Has seleccionado el archivo: " +
		                chooser.getSelectedFile().getName());
		            imagen = chooser.getSelectedFile().getAbsolutePath();
		            // Cargar la imagen y mostrarla en un componente Swing aquí


		        }
		    }
			
		});


		finalregistro.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {

				CrearUsuarios(username, apellidos, FechaN, Correo, Num, password);
			}
			
		});
		cancelar.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				if(registroPrevio == false) {
				
				remove(actual);
				Login();
				repaint();
				revalidate();
				}else {
				remove(actual);
				Perfil();
				repaint();
				revalidate();
			
				}
			}
		});
		
		//--------------------------------------------------------------------
		
		JLabel fondo = new JLabel(new ImageIcon("hotel2.PNG"));
		fondo.setBounds(-2, 1, 1000, 600);//ANCHO X, Y,TAMAÑO
		registro.add(fondo);

		anterior=actual;
		actual=registro;
		remove(anterior);
		add(actual);
		repaint();
		revalidate();
	}

	public void ConsultarUsuarios() {

		consultar= new JPanel();
		consultar.setSize(1000, 600);
		consultar.setLocation(0,0);
		consultar.setLayout(null);
        consultar.setBackground(Color.decode("#dce7ec"));
	
        JScrollPane scroll = new JScrollPane(new Tabla(getUsuarios(), UsuariosColumns));
        scroll.setBounds(50, 230, 880, 300);
        scroll.setVisible(true);
        consultar.add(scroll);
        
		JLabel fondo = new JLabel(new ImageIcon("hotalF.PNG"));
		fondo.setBounds(-2, 1, 1000, 600);//ANCHO X, Y,TAMAÑO
		consultar.add(fondo);
        
        anterior=actual;
		actual=consultar;
		remove(anterior);
		add(actual);

		repaint();
		revalidate();
		
		
	}

	public void Perfil() {
		perfil = new JPanel();
		perfil.setSize(1000,600);
		perfil.setLocation(0,0);
		perfil.setLayout(null);
		perfil.setBackground(Color.decode("#dce7ec"));
		
		JMenu cuentaMenu = new JMenu("Cuenta");
		JMenuItem miCuentaMenuItem = new JMenuItem("Editar");
		cuentaMenu.add(miCuentaMenuItem);
		JMenuItem cerrarSesionMenuItem = new JMenuItem("Cerrar sesion");
		cuentaMenu.add(cerrarSesionMenuItem);
		JMenuBar menuBar = new JMenuBar();
		menuBar.add(cuentaMenu);
		this.setJMenuBar(menuBar);
		
		JMenu usuariosMenu = new JMenu("Usuarios");
		JMenuItem ConsultaMenuItem = new JMenuItem("Consultar Cuenta");
		JMenuItem crearUsuarioMenuItem = new JMenuItem("Crear usuarios");
		JMenuItem downloadInfo= new JMenuItem("Descargar Info");
		JMenuItem eliminarUsuario= new JMenuItem("Eliminar Cuenta");
		usuariosMenu.add(eliminarUsuario);

		usuariosMenu.add(ConsultaMenuItem);
		usuariosMenu.add(crearUsuarioMenuItem);
		menuBar.add(usuariosMenu);
		usuariosMenu.add(downloadInfo);
		
		JLabel iconoLista = new JLabel(new ImageIcon("material-escolar(1).PNG"));
		iconoLista.setBounds(165, 80, 170, 170);
		perfil.add(iconoLista);
		
		miCuentaMenuItem.addActionListener(new ActionListener() {
		    @Override
		    public void actionPerformed(ActionEvent e) {
		        
		        menuMiCuenta();
		    }
		});
		crearUsuarioMenuItem.addActionListener(new ActionListener() {
		    @Override
		    public void actionPerformed(ActionEvent e) {
		        menuCrearUsuario();
		    }
		});
		cerrarSesionMenuItem.addActionListener(new ActionListener() {
		    @Override
		    public void actionPerformed(ActionEvent e) {
		        
		    	JOptionPane.showMessageDialog(null,"Adios "+nombre,"Bye bye", JOptionPane.CLOSED_OPTION );
		    	menuBar.remove(cuentaMenu);
		    	menuBar.remove(usuariosMenu);
		    	Login();
		    	//filtroUsuarios();
		    }
		});
		ConsultaMenuItem.addActionListener(new ActionListener() {
		    @Override
		    public void actionPerformed(ActionEvent e) {
		        ConsultarUsuarios();
		    }
		});
		downloadInfo.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {

				descargar(posicionUsuario);
//				try {
//					eliminarUsuario(posicionUsuario);
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
			}
			
		});
		eliminarUsuario.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {

					try {
						eliminarUsuario(posicionUsuario);
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
			}
			
		});
		JLabel fondo = new JLabel(new ImageIcon("FondoInicio1.PNG"));
		fondo.setBounds(-2, 1, 1000, 600);//ANCHO X, Y,TAMAÑO
		perfil.add(fondo);

		anterior=actual;
		actual=perfil;
		remove(anterior);
		add(actual);
		
		repaint();
		revalidate();
	}
	
	public void descargar(int numUsuarioDescargar) {
		  
		  String infoUsuario = "";
		  
		  try {
				BufferedReader reader = new BufferedReader(new FileReader("users.txt"));
				String line = reader.readLine();

				for (int i = 0; i < numUsuarioDescargar; i++) {
					line = reader.readLine();				
				}

				infoUsuario = line;
				
				reader.close();

			} catch (IOException e1) {
				e1.printStackTrace();
			} 
		  
		  //crea cuadro de seleccion de direccion
		  JFileChooser fileChooser = new JFileChooser();
		  fileChooser.setDialogTitle("Seleccionar destino de descarga");

		  // muestra el cuadro y espera a que seleccione una direccion
		  int userSelection = fileChooser.showSaveDialog(this);
		  if (userSelection == JFileChooser.APPROVE_OPTION) {
			  // guarda la direccion seleccionada
			  String filePath = fileChooser.getSelectedFile().getAbsolutePath();

			  try {
				  //crea el archivo de texto
				  File file = new File(filePath+".txt");
				  BufferedWriter writer = new BufferedWriter(new FileWriter(file));
				  writer.write(infoUsuario);
				  writer.close();
			  } catch (IOException e1) {
				  e1.printStackTrace();
			  }

		  }
	  }

	public void eliminarUsuario(int numUsuarioEliminar) throws IOException {
		
	File archivo = new File("users.txt");
	Scanner entrada = new Scanner(archivo);
	List<String> lineas = new ArrayList<String>();

	while (entrada.hasNextLine()) {
		lineas.add(entrada.nextLine());
	}
	entrada.close();

	int numeroLineaAEliminar = numUsuarioEliminar;
	lineas.remove(numeroLineaAEliminar);

	
	BufferedWriter writer = new BufferedWriter(new FileWriter(archivo));
	for (String linea : lineas) {
		writer.write(linea + "\n");
	}
	
	writer.close();
	
	}

	public void CrearUsuarios(JTextField nombreText, JTextField apellidosText,
			JTextField FechaN, JTextField correo, JTextField numT, JPasswordField contraseñaText) {

//		CrearUsuario(username, apellidos, FechaN, Correo, Num, password);
		//String password = new String(contraseñaText.getPassword());
		String password = new String(contraseñaText.getPassword());
		String datosUsuario = "";

		boolean match = false;

		if(password.length() != 0
				&& nombreText.getText().length() != 0
				&& apellidosText.getText().length() != 0
				&& FechaN.getText().length() != 0
				&& correo.getText().length() != 0
				) {

			try {
				FileWriter writer = new FileWriter("users.txt", true);

				BufferedWriter buffWriter = new BufferedWriter(writer);

				datosUsuario = nombreText.getText()+","
						+apellidosText.getText()+","
						+FechaN.getText()+","
						+correo.getText()+","
						+numT.getText()+","
						+password;
				BufferedReader reader = new BufferedReader(new FileReader("users.txt"));
				String line = reader.readLine();

				String[] lineArray = null;

				while (line != null) {
					lineArray = line.split(",");

					if(correo.getText().equals(lineArray[3])) {
						match = true;
					}

					line = reader.readLine();
				}
				reader.close();

				if(!match) {
					buffWriter.write(datosUsuario);
					buffWriter.newLine();
					buffWriter.close();
					JOptionPane.showMessageDialog(this, "Cuenta creada con exito", "Listo!", JOptionPane.INFORMATION_MESSAGE);


				}
				else {
					JOptionPane.showMessageDialog(this, "Error al registrar", "Error", JOptionPane.ERROR_MESSAGE);
				}

			} catch (IOException e1) {
				
				e1.printStackTrace();
			}
		}
		else {

			JOptionPane.showMessageDialog(this, "Error al registrar", "Error", JOptionPane.ERROR_MESSAGE);
		}

	}
	
	public void actualizarUsuario(JTextField nombreText, JTextField apellidosText, 
			JTextField correo, JTextField telefono, JPasswordField contraseñaText, JPasswordField contraseñaText2, int numUsuario) {

//		CrearUsuario(username, apellidos, FechaN, Correo, Num, password);


		//String password = new String(contraseñaText.getPassword());
		String password = new String(contraseñaText.getPassword());
		String password2 = new String(contraseñaText2.getPassword());
		String datosUsuario = "";

		boolean match = false;

		if(password.equals(password2) && password.length() != 0
				&& nombreText.getText().length() != 0
				&& apellidosText.getText().length() != 0
				&& correo.getText().length() != 0) {

			try {
				
				BufferedReader readerCounter = new BufferedReader(new FileReader("users.txt"));
				String newLine = readerCounter.readLine();

				for (int i = 0; i < numUsuario; i++) {
					newLine = readerCounter.readLine();
				}
				
				String data[] = newLine.split(",");

				datosUsuario = nombreText.getText()+","
						+apellidosText.getText()+","
						+data[2]+","
						+correo.getText()+","
						+data[4]+","
						+password
						+data[6];

				BufferedReader reader = new BufferedReader(new FileReader("users.txt"));
				String line = reader.readLine();

				String[] lineArray = null;

				while (line != null) {
					lineArray = line.split(",");

					if(correo.getText().equals(lineArray[3])) {
						match = true;
					}

					line = reader.readLine();
				}
				reader.close();

				if(!match) {
					
					eliminarUsuario(numUsuario);
					
					FileWriter writer = new FileWriter("users.txt", true);
					BufferedWriter buffWriter = new BufferedWriter(writer);
					
					buffWriter.write(datosUsuario);
					buffWriter.newLine();
					buffWriter.close();
					JOptionPane.showMessageDialog(this, "Cuenta creada con exito", "Listo!", JOptionPane.INFORMATION_MESSAGE);

					/*
					 * logica de el cambio de ventanas
					 */


				}
				else {
					JOptionPane.showMessageDialog(this, "Error al registrar1", "Error", JOptionPane.ERROR_MESSAGE);
				}

			} catch (IOException e1) {
				
				e1.printStackTrace();
			}
		}
		else {

			JOptionPane.showMessageDialog(this, "Error al registrar", "Error", JOptionPane.ERROR_MESSAGE);
		}

	}
	
	public String[] getDatosUsuario(int numUsuario) {
		
		String[] datos = null;

		try {
			BufferedReader readerCounter = new BufferedReader(new FileReader("users.txt"));
			String line = readerCounter.readLine();
			
			datos = line.split(",");
			
			for (int i = 0; i < numUsuario; i++) {
				
				line = readerCounter.readLine();
				datos = line.split(",");
			}

			readerCounter.close();

		} catch (IOException e1) {
			e1.printStackTrace();
		} 
		
		return datos;
	}
	
	public Object[][] getUsuarios() {
		
		Object[][] data = new Object[getNumeroUsuarios()][UsuariosColumns.length];
		
		try {
			BufferedReader reader = new BufferedReader(new FileReader("users.txt"));
			String line = reader.readLine();
			
			String[] lineArray = line.split(",");;

			int aux = 0;
			
			boolean addDato = false;

			//añade los datos de la base de datos a la matriz data
			while (line != null) {
				lineArray = line.split(",");
				
				
				for (int i = 0; i < lineArray.length; i++) {

					if(lineArray[3].contains("@gmail")||lineArray[3].contains("@hotmail")||lineArray[3].contains("@outlook")||lineArray[3].contains("@alu.uabcs")||lineArray[3].contains("@uabcs"))
					{

						if(i == lineArray.length) {
							data[aux][i] = lineArray[i+1];
							addDato = true;
						}//else if(i == lineArray.length-3) {
							//data[aux][i] = new JLabel(new ImageIcon(lineArray[i+1]));
							//addDato = true;
						//}
						else {
						data[aux][i] = lineArray[i];
						addDato = true;
						}
					}

				}
				line = reader.readLine();
				if(addDato) {
				aux++;
				addDato = false;
				}
			}

			reader.close();
			
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		
		return data;
	}
	
	public int getNumeroUsuarios() {

		int numLines = 0;

		try {
			BufferedReader readerCounter = new BufferedReader(new FileReader("users.txt"));
			String lineCounter = readerCounter.readLine();

			String[] data = lineCounter.split(",");
			
			while(lineCounter!=null) {
				if(data[3].contains("@gmail")||data[3].contains("@hotmail")||data[3].contains("@outlook")||data[3].contains("@alu.uabcs")||data[3].contains("@uabcs")) {
				numLines++;
				}
				lineCounter = readerCounter.readLine();
				
				if(lineCounter!=null) {
				data = lineCounter.split(",");
				}
			}

			readerCounter.close();

		} catch (IOException e1) {
			e1.printStackTrace();
		} 

		return numLines;

	}

}
